type Mutation {
  createUser(data: UserCreateInput): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteUser(where: UserWhereUniqueInput!): User
  createContraction(data: ContractionCreateInput): Contraction!
}

type Query {
  users: [User!]!
  user(id: ID!): User
  contractions: [Contraction]!
  contraction(id: ID!): Contraction
}

type User {
  id: ID!
  email: String!
  first_name: String
  last_name: String
  contractions: [Contraction]!
}

scalar DateTime

input ContractionCreateInput {
  id: ID
  start: DateTime!
  end: DateTime!
  duration: Int
  frequency: Int
  pain: Int!
  user: UserCreateOneInput!
}

input UserCreateInput {
  id: ID
  first_name: String
  last_name: String
  email: String!
}

input UserUpdateInput {
  first_name: String
  last_name: String
  email: String
}

input UserCreateOneInput {
  create: UserCreateInput
}

input UserWhereUniqueInput {
  id: ID
}

type Contraction {
  id: ID!
  start: DateTime!
  end: DateTime!
  duration: Int!
  frequency: Int
  pain: Int!
  user: User!
}
